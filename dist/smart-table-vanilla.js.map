{"version":3,"file":"smart-table-vanilla.js","sources":["../node_modules/smart-table-events/dist/bundle/module.js","../node_modules/smart-table-filter/dist/bundle/module.js","../node_modules/smart-table-sort/dist/bundle/module.js","../node_modules/smart-table-core/dist/bundle/module.js","../lib/loadingIndicator.js","../lib/sort.js","../lib/helpers.js","../lib/filters.js","../lib/search.js","../lib/table.js"],"sourcesContent":["const emitter = () => {\n    const listenersLists = {};\n    const instance = {\n        on(event, ...listeners) {\n            listenersLists[event] = (listenersLists[event] || []).concat(listeners);\n            return instance;\n        },\n        dispatch(event, ...args) {\n            const listeners = listenersLists[event] || [];\n            for (const listener of listeners) {\n                listener(...args);\n            }\n            return instance;\n        },\n        off(event, ...listeners) {\n            if (event === undefined) {\n                Object.keys(listenersLists).forEach(ev => instance.off(ev));\n            }\n            else {\n                const list = listenersLists[event] || [];\n                listenersLists[event] = listeners.length ? list.filter(listener => !listeners.includes(listener)) : [];\n            }\n            return instance;\n        }\n    };\n    return instance;\n};\nconst proxyListener = (eventMap) => ({ emitter }) => {\n    const eventListeners = {};\n    const proxy = {\n        off(ev) {\n            if (!ev) {\n                Object.keys(eventListeners).forEach(eventName => proxy.off(eventName));\n            }\n            if (eventListeners[ev]) {\n                emitter.off(ev, ...eventListeners[ev]);\n            }\n            return proxy;\n        }\n    };\n    for (const ev of Object.keys(eventMap)) {\n        const method = eventMap[ev];\n        eventListeners[ev] = [];\n        proxy[method] = function (...listeners) {\n            eventListeners[ev] = eventListeners[ev].concat(listeners);\n            emitter.on(ev, ...listeners);\n            return proxy;\n        };\n    }\n    return proxy;\n};\n\nexport { emitter, proxyListener };\n","import { compose } from 'smart-table-operators';\nimport { pointer } from 'smart-table-json-pointer';\n\nvar Type;\n(function (Type) {\n    Type[\"BOOLEAN\"] = \"boolean\";\n    Type[\"NUMBER\"] = \"number\";\n    Type[\"DATE\"] = \"date\";\n    Type[\"STRING\"] = \"string\";\n})(Type || (Type = {}));\nconst typeExpression = (type) => {\n    switch (type) {\n        case Type.BOOLEAN:\n            return Boolean;\n        case Type.NUMBER:\n            return Number;\n        case Type.DATE:\n            return val => new Date(val);\n        case Type.STRING:\n            return compose(String, val => val.toLowerCase());\n        default:\n            return val => val;\n    }\n};\nvar FilterOperator;\n(function (FilterOperator) {\n    FilterOperator[\"INCLUDES\"] = \"includes\";\n    FilterOperator[\"IS\"] = \"is\";\n    FilterOperator[\"IS_NOT\"] = \"isNot\";\n    FilterOperator[\"LOWER_THAN\"] = \"lt\";\n    FilterOperator[\"GREATER_THAN\"] = \"gt\";\n    FilterOperator[\"GREATER_THAN_OR_EQUAL\"] = \"gte\";\n    FilterOperator[\"LOWER_THAN_OR_EQUAL\"] = \"lte\";\n    FilterOperator[\"EQUALS\"] = \"equals\";\n    FilterOperator[\"NOT_EQUALS\"] = \"notEquals\";\n    FilterOperator[\"ANY_OF\"] = \"anyOf\";\n})(FilterOperator || (FilterOperator = {}));\nconst not = fn => input => !fn(input);\nconst is = value => input => Object.is(value, input);\nconst lt = value => input => input < value;\nconst gt = value => input => input > value;\nconst equals = value => input => value === input;\nconst includes = value => input => input.includes(value);\nconst anyOf = value => input => value.includes(input);\nconst operators = {\n    [\"includes\" /* INCLUDES */]: includes,\n    [\"is\" /* IS */]: is,\n    [\"isNot\" /* IS_NOT */]: compose(is, not),\n    [\"lt\" /* LOWER_THAN */]: lt,\n    [\"gte\" /* GREATER_THAN_OR_EQUAL */]: compose(lt, not),\n    [\"gt\" /* GREATER_THAN */]: gt,\n    [\"lte\" /* LOWER_THAN_OR_EQUAL */]: compose(gt, not),\n    [\"equals\" /* EQUALS */]: equals,\n    [\"notEquals\" /* NOT_EQUALS */]: compose(equals, not),\n    [\"anyOf\" /* ANY_OF */]: anyOf\n};\nconst every = fns => (...args) => fns.every(fn => fn(...args));\nconst predicate = ({ value = '', operator = \"includes\" /* INCLUDES */, type }) => {\n    const typeIt = typeExpression(type);\n    const operateOnTyped = compose(typeIt, operators[operator]);\n    const predicateFunc = operateOnTyped(value);\n    return compose(typeIt, predicateFunc);\n};\n// Avoid useless filter lookup (improve perf)\nconst normalizeClauses = (conf) => {\n    const output = {};\n    const validPath = Object.keys(conf).filter(path => Array.isArray(conf[path]));\n    validPath.forEach(path => {\n        const validClauses = conf[path].filter(c => c.value !== '');\n        if (validClauses.length > 0) {\n            output[path] = validClauses;\n        }\n    });\n    return output;\n};\nconst filter = (filter) => {\n    const normalizedClauses = normalizeClauses(filter);\n    const funcList = Object.keys(normalizedClauses).map(path => {\n        const getter = pointer(path).get;\n        const clauses = normalizedClauses[path].map(predicate);\n        return compose(getter, every(clauses));\n    });\n    const filterPredicate = every(funcList);\n    return array => array.filter(filterPredicate);\n};\n\nexport { FilterOperator, predicate, filter };\n","import { swap } from 'smart-table-operators';\nimport { pointer } from 'smart-table-json-pointer';\n\nconst defaultComparator = (a, b) => {\n    if (a === b) {\n        return 0;\n    }\n    if (a === undefined) {\n        return 1;\n    }\n    if (b === undefined) {\n        return -1;\n    }\n    return a < b ? -1 : 1;\n};\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"ASC\"] = \"asc\";\n    SortDirection[\"DESC\"] = \"desc\";\n    SortDirection[\"NONE\"] = \"none\";\n})(SortDirection || (SortDirection = {}));\nconst sortByProperty = (prop, comparator) => {\n    const propGetter = pointer(prop).get;\n    return (a, b) => comparator(propGetter(a), propGetter(b));\n};\nconst defaultSortFactory = (conf) => {\n    const { pointer: pointer$$1, direction = \"asc\" /* ASC */, comparator = defaultComparator } = conf;\n    if (!pointer$$1 || direction === \"none\" /* NONE */) {\n        return (array) => [...array];\n    }\n    const orderFunc = sortByProperty(pointer$$1, comparator);\n    const compareFunc = direction === \"desc\" /* DESC */ ? swap(orderFunc) : orderFunc;\n    return (array) => [...array].sort(compareFunc);\n};\n\nexport { SortDirection, defaultSortFactory };\n","import { curry, tap, compose } from 'smart-table-operators';\nimport { pointer } from 'smart-table-json-pointer';\nimport { emitter, proxyListener } from 'smart-table-events';\nimport { filter } from 'smart-table-filter';\nexport { FilterOperator } from 'smart-table-filter';\nimport { defaultSortFactory } from 'smart-table-sort';\nexport { SortDirection } from 'smart-table-sort';\nimport { regexp } from 'smart-table-search';\n\nconst sliceFactory = ({ page = 1, size } = { page: 1 }) => (array = []) => {\n    const actualSize = size || array.length;\n    const offset = (page - 1) * actualSize;\n    return array.slice(offset, offset + actualSize);\n};\n\nvar SmartTableEvents;\n(function (SmartTableEvents) {\n    SmartTableEvents[\"TOGGLE_SORT\"] = \"TOGGLE_SORT\";\n    SmartTableEvents[\"DISPLAY_CHANGED\"] = \"DISPLAY_CHANGED\";\n    SmartTableEvents[\"PAGE_CHANGED\"] = \"CHANGE_PAGE\";\n    SmartTableEvents[\"EXEC_CHANGED\"] = \"EXEC_CHANGED\";\n    SmartTableEvents[\"FILTER_CHANGED\"] = \"FILTER_CHANGED\";\n    SmartTableEvents[\"SUMMARY_CHANGED\"] = \"SUMMARY_CHANGED\";\n    SmartTableEvents[\"SEARCH_CHANGED\"] = \"SEARCH_CHANGED\";\n    SmartTableEvents[\"EXEC_ERROR\"] = \"EXEC_ERROR\";\n})(SmartTableEvents || (SmartTableEvents = {}));\nconst curriedPointer = (path) => {\n    const { get, set } = pointer(path);\n    return { get, set: curry(set) };\n};\nconst tableDirective = ({ sortFactory, tableState, data, filterFactory, searchFactory }) => {\n    let filteredCount = data.length;\n    let matchingItems = data;\n    const table = emitter();\n    const sortPointer = curriedPointer('sort');\n    const slicePointer = curriedPointer('slice');\n    const filterPointer = curriedPointer('filter');\n    const searchPointer = curriedPointer('search');\n    // We need to register in case the summary comes from outside (like server data)\n    table.on(\"SUMMARY_CHANGED\" /* SUMMARY_CHANGED */, ({ filteredCount: count }) => {\n        filteredCount = count;\n    });\n    const safeAssign = curry((base, extension) => Object.assign({}, base, extension));\n    const dispatch = curry(table.dispatch, 2);\n    const dispatchSummary = (filtered) => {\n        matchingItems = filtered;\n        return dispatch(\"SUMMARY_CHANGED\" /* SUMMARY_CHANGED */, {\n            page: tableState.slice.page,\n            size: tableState.slice.size,\n            filteredCount: filtered.length\n        });\n    };\n    const exec = ({ processingDelay = 20 } = { processingDelay: 20 }) => {\n        table.dispatch(\"EXEC_CHANGED\" /* EXEC_CHANGED */, { working: true });\n        setTimeout(() => {\n            try {\n                const filterFunc = filterFactory(filterPointer.get(tableState));\n                const searchFunc = searchFactory(searchPointer.get(tableState));\n                const sortFunc = sortFactory(sortPointer.get(tableState));\n                const sliceFunc = sliceFactory(slicePointer.get(tableState));\n                const execFunc = compose(filterFunc, searchFunc, tap(dispatchSummary), sortFunc, sliceFunc);\n                const displayed = execFunc(data);\n                table.dispatch(\"DISPLAY_CHANGED\" /* DISPLAY_CHANGED */, displayed.map(d => ({\n                    index: data.indexOf(d),\n                    value: d\n                })));\n            }\n            catch (err) {\n                table.dispatch(\"EXEC_ERROR\" /* EXEC_ERROR */, err);\n            }\n            finally {\n                table.dispatch(\"EXEC_CHANGED\" /* EXEC_CHANGED */, { working: false });\n            }\n        }, processingDelay);\n    };\n    const updateTableState = curry((pter, ev, newPartialState) => compose(safeAssign(pter.get(tableState)), tap(dispatch(ev)), pter.set(tableState))(newPartialState));\n    const resetToFirstPage = () => updateTableState(slicePointer, \"CHANGE_PAGE\" /* PAGE_CHANGED */, { page: 1 });\n    const tableOperation = (pter, ev) => compose(updateTableState(pter, ev), resetToFirstPage, () => table.exec() // We wrap within a function so table.exec can be overwritten (when using with a server for example)\n    );\n    const api = {\n        sort: tableOperation(sortPointer, \"TOGGLE_SORT\" /* TOGGLE_SORT */),\n        filter: tableOperation(filterPointer, \"FILTER_CHANGED\" /* FILTER_CHANGED */),\n        search: tableOperation(searchPointer, \"SEARCH_CHANGED\" /* SEARCH_CHANGED */),\n        slice: compose(updateTableState(slicePointer, \"CHANGE_PAGE\" /* PAGE_CHANGED */), () => table.exec()),\n        exec,\n        async eval(state = tableState) {\n            const sortFunc = sortFactory(sortPointer.get(state));\n            const searchFunc = searchFactory(searchPointer.get(state));\n            const filterFunc = filterFactory(filterPointer.get(state));\n            const sliceFunc = sliceFactory(slicePointer.get(state));\n            const execFunc = compose(filterFunc, searchFunc, sortFunc, sliceFunc);\n            return execFunc(data).map(d => ({ index: data.indexOf(d), value: d }));\n        },\n        onDisplayChange(fn) {\n            table.on(\"DISPLAY_CHANGED\" /* DISPLAY_CHANGED */, fn);\n        },\n        getTableState() {\n            const sort = Object.assign({}, tableState.sort);\n            const search = Object.assign({}, tableState.search);\n            const slice = Object.assign({}, tableState.slice);\n            const filter$$1 = {};\n            for (const prop of Object.getOwnPropertyNames(tableState.filter)) {\n                filter$$1[prop] = tableState.filter[prop].map(v => Object.assign({}, v));\n            }\n            return { sort, search, slice, filter: filter$$1 };\n        },\n        getMatchingItems() {\n            return [...matchingItems];\n        }\n    };\n    const instance = Object.assign(table, api);\n    Object.defineProperties(instance, {\n        filteredCount: {\n            get() {\n                return filteredCount;\n            }\n        },\n        length: {\n            get() {\n                return data.length;\n            }\n        }\n    });\n    return instance;\n};\n\nconst filterListener = proxyListener({ [\"FILTER_CHANGED\" /* FILTER_CHANGED */]: 'onFilterChange' });\n// todo expose and re-export from smart-table-filter\nvar FilterType;\n(function (FilterType) {\n    FilterType[\"BOOLEAN\"] = \"boolean\";\n    FilterType[\"NUMBER\"] = \"number\";\n    FilterType[\"DATE\"] = \"date\";\n    FilterType[\"STRING\"] = \"string\";\n})(FilterType || (FilterType = {}));\nconst filterDirective = ({ table, pointer: pointer$$1, operator = \"includes\" /* INCLUDES */, type = \"string\" /* STRING */ }) => {\n    const proxy = filterListener({ emitter: table });\n    return Object.assign({\n        filter(input) {\n            const filterConf = {\n                [pointer$$1]: [\n                    {\n                        value: input,\n                        operator,\n                        type\n                    }\n                ]\n            };\n            return table.filter(filterConf);\n        },\n        state() {\n            return table.getTableState().filter;\n        }\n    }, proxy);\n};\n\nconst searchListener = proxyListener({ [\"SEARCH_CHANGED\" /* SEARCH_CHANGED */]: 'onSearchChange' });\nconst searchDirective = ({ table, scope = [] }) => {\n    const proxy = searchListener({ emitter: table });\n    return Object.assign(proxy, {\n        search(input, opts = {}) {\n            return table.search(Object.assign({}, { value: input, scope }, opts));\n        },\n        state() {\n            return table.getTableState().search;\n        }\n    }, proxy);\n};\n\nconst sliceListener = proxyListener({\n    [\"CHANGE_PAGE\" /* PAGE_CHANGED */]: 'onPageChange',\n    [\"SUMMARY_CHANGED\" /* SUMMARY_CHANGED */]: 'onSummaryChange'\n});\nconst paginationDirective = ({ table }) => {\n    let { slice: { page: currentPage, size: currentSize } } = table.getTableState();\n    let itemListLength = table.filteredCount;\n    const proxy = sliceListener({ emitter: table });\n    const api = {\n        selectPage(p) {\n            return table.slice({ page: p, size: currentSize });\n        },\n        selectNextPage() {\n            return api.selectPage(currentPage + 1);\n        },\n        selectPreviousPage() {\n            return api.selectPage(currentPage - 1);\n        },\n        changePageSize(size) {\n            return table.slice({ page: 1, size });\n        },\n        isPreviousPageEnabled() {\n            return currentPage > 1;\n        },\n        isNextPageEnabled() {\n            return Math.ceil(itemListLength / currentSize) > currentPage;\n        },\n        state() {\n            return Object.assign(table.getTableState().slice, { filteredCount: itemListLength });\n        }\n    };\n    const directive = Object.assign(api, proxy);\n    directive.onSummaryChange(({ page: p, size: s, filteredCount }) => {\n        currentPage = p;\n        currentSize = s;\n        itemListLength = filteredCount;\n    });\n    return directive;\n};\n\nconst debounce = (fn, time) => {\n    let timer = null;\n    return (...args) => {\n        if (timer !== null) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(() => fn(...args), time);\n    };\n};\nconst sortListeners = proxyListener({ [\"TOGGLE_SORT\" /* TOGGLE_SORT */]: 'onSortToggle' });\nconst directions = [\"asc\" /* ASC */, \"desc\" /* DESC */];\nconst sortDirective = ({ pointer: pointer$$1, table, cycle = false, debounceTime = 0 }) => {\n    const cycleDirections = cycle === true ? [\"none\" /* NONE */].concat(directions) : [...directions].reverse();\n    const commit = debounce(table.sort, debounceTime);\n    let hit = 0;\n    const proxy = sortListeners({ emitter: table });\n    const directive = Object.assign({\n        toggle() {\n            hit++;\n            const direction = cycleDirections[hit % cycleDirections.length];\n            return commit({ pointer: pointer$$1, direction });\n        },\n        state() {\n            return table.getTableState().sort;\n        }\n    }, proxy);\n    directive.onSortToggle(({ pointer: p }) => {\n        hit = pointer$$1 !== p ? 0 : hit;\n    });\n    const { pointer: statePointer, direction = \"asc\" /* ASC */ } = directive.state();\n    hit = statePointer === pointer$$1 ? (direction === \"asc\" /* ASC */ ? 1 : 2) : 0;\n    return directive;\n};\n\nconst summaryListener = proxyListener({ [\"SUMMARY_CHANGED\" /* SUMMARY_CHANGED */]: 'onSummaryChange' });\nconst summaryDirective = ({ table }) => summaryListener({ emitter: table });\n\nconst executionListener = proxyListener({ [\"EXEC_CHANGED\" /* EXEC_CHANGED */]: 'onExecutionChange' });\nconst workingIndicatorDirective = ({ table }) => executionListener({ emitter: table });\n\nconst defaultTableState = () => ({ sort: {}, slice: { page: 1 }, filter: {}, search: {} });\nconst smartTable = ({ sortFactory = defaultSortFactory, filterFactory = filter, searchFactory = regexp, tableState = defaultTableState(), data = [] } = {\n    sortFactory: defaultSortFactory,\n    filterFactory: filter,\n    searchFactory: regexp,\n    tableState: defaultTableState(),\n    data: []\n}, ...tableExtensions) => {\n    const coreTable = tableDirective({ sortFactory, filterFactory, tableState, data, searchFactory });\n    return tableExtensions.reduce((accumulator, newdir) => Object.assign(accumulator, newdir({\n        sortFactory,\n        filterFactory,\n        searchFactory,\n        tableState,\n        data,\n        table: coreTable\n    })), coreTable);\n};\n\nexport { smartTable, FilterType, filterDirective, searchDirective, paginationDirective, sortDirective, summaryDirective, SmartTableEvents, tableDirective, workingIndicatorDirective, sliceFactory };\n","import {workingIndicatorDirective} from 'smart-table-core';\n\nexport default function ({table, el}) {\n  const component = workingIndicatorDirective({table});\n  component.onExecutionChange(function ({working}) {\n    el.classList.remove('st-working');\n    if (working === true) {\n      el.classList.add('st-working');\n    }\n  });\n  return component;\n};","import {sortDirective} from 'smart-table-core';\n\nexport default function ({el, table, conf = {}}) {\n  const pointer = conf.pointer || el.getAttribute('data-st-sort');\n  const cycle = conf.cycle || el.hasAttribute('data-st-sort-cycle');\n  const component = sortDirective({pointer, table, cycle});\n  component.onSortToggle(({pointer:currentPointer, direction}) => {\n    el.classList.remove('st-sort-asc', 'st-sort-desc');\n    if (pointer === currentPointer && direction !== 'none') {\n      const className = direction === 'asc' ? 'st-sort-asc' : 'st-sort-desc';\n      el.classList.add(className);\n    }\n  });\n  const eventListener = ev => component.toggle();\n  el.addEventListener('click', eventListener);\n  return component;\n}","export function debounce (fn, delay) {\n  let timeoutId;\n  return (ev) => {\n    if (timeoutId) {\n      window.clearTimeout(timeoutId);\n    }\n    timeoutId = window.setTimeout(function () {\n      fn(ev);\n    }, delay);\n  };\n};","import {filterDirective} from 'smart-table-core';\nimport {debounce} from './helpers'\n\nexport default function filterInput ({table, el, delay = 400, conf = {}}) {\n  const pointer = conf.pointer || el.getAttribute('data-st-filter');\n  const operator = conf.operator || el.getAttribute('data-st-filter-operator') || 'includes';\n  const elType = el.hasAttribute('type') ? el.getAttribute('type') : 'string';\n  let type = conf.type || el.getAttribute('data-st-filter-type');\n  if (!type) {\n    type = ['date', 'number'].includes(elType) ? elType : 'string';\n  }\n  const component = filterDirective({table, pointer, type, operator});\n  const eventListener = debounce(ev => component.filter(el.value), delay);\n  el.addEventListener('input', eventListener);\n  if (el.tagName === 'SELECT') {\n    el.addEventListener('change', eventListener);\n  }\n  return component;\n};","import {searchDirective} from 'smart-table-core';\nimport {debounce} from './helpers';\n\nexport default function ({el, table, delay = 400, conf = {}}) {\n  const scope = conf.scope || (el.getAttribute('data-st-search') || '').split(',').map(s => s.trim());\n  const component = searchDirective({table, scope});\n  const eventListener = debounce(ev => {\n    component.search(el.value);\n  }, delay);\n  el.addEventListener('input', eventListener);\n};","import loading from './loadingIndicator';\nimport sort from  './sort';\nimport filter from './filters'\nimport searchInput from './search'\n\nexport default function ({el, table}) {\n  // boot\n  [...el.querySelectorAll('[data-st-sort]')].forEach(el => sort({el, table}));\n  [...el.querySelectorAll('[data-st-loading-indicator]')].forEach(el => loading({el, table}));\n  [...el.querySelectorAll('[data-st-search]')].forEach(el => searchInput({el, table}));\n  [...el.querySelectorAll('[data-st-filter]')].forEach(el => filter({el, table}));\n\n  //extension\n  const tableDisplayChange = table.onDisplayChange;\n  return Object.assign(table, {\n    onDisplayChange: (listener) => {\n      tableDisplayChange(listener);\n      table.exec();\n    }\n  });\n};"],"names":["debounce","filter"],"mappings":"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"}